generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String          @unique
  password     String
  companyName  String?
  companyNiche String?
  role         Role            @default(CUSTOMER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  ProductRevew ProductReview[]
  Orders       Order[]
  Product      Product[]
}

enum Role {
  CUSTOMER
  VENDOR
}

model Category {
  id       Int       @id @default(autoincrement())
  href     String
  icon     String
  name     String
  Products Product[]
}

model Product {
  id               Int                @id @default(autoincrement())
  title            String
  subtitle         String
  description      String             @db.Text
  price            Int
  stock            Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           Int?
  User             User?              @relation(fields: [userId], references: [id])
  OrderItem        OrderItem[]
  Images           ProductImage[]
  Reviews          ProductReview[]
  Orders           Order[]
  ProductChoosable ProductChoosable[]
  Category         Category?          @relation(fields: [categoryId], references: [id])
  categoryId       Int?
}

// like Size:
model ProductChoosable {
  id             Int              @id @default(autoincrement())
  productId      Int
  Product        Product          @relation(fields: [productId], references: [id])
  title          String
  InputChoosable InputChoosable[]
}

//input like /M/S/XL/L...
model InputChoosable {
  id                 Int              @id @default(autoincrement())
  productChoosableId Int
  ProductChoosable   ProductChoosable @relation(fields: [productChoosableId], references: [id])
  input              String
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Product? @relation(fields: [productId], references: [id])
  src       String
  alt       String
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  title     String
  text      String   @db.Text
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  User            User        @relation(fields: [userId], references: [id])
  OrderItems      OrderItem[]
  adresse         String
  postal          String
  housenumber     String
  city            String
  premiumShipping Boolean
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Product         Product?    @relation(fields: [productId], references: [id])
  productId       Int?
}

model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int
  Order           Order   @relation(fields: [orderId], references: [id])
  productId       Int
  Product         Product @relation(fields: [productId], references: [id])
  amount          Int
  priceAtPurchase Int
}
