generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String          @unique
  password     String
  role         Role            @default(CUSTOMER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  ProductRevew ProductReview[]
  Orders       Order[]
}

enum Role {
  CUSTOMER
  SELLER
}

model Product {
  id               Int                @id @default(autoincrement())
  title            String
  description      String             @db.Text
  price            Int
  images           ProductImage[]
  reviews          ProductReview[]
  Orders           Order[]
  ProductChoosable ProductChoosable[]
  stock            Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

// like Size:
model ProductChoosable {
  id             Int              @id @default(autoincrement())
  productId      Int
  Product        Product          @relation(fields: [productId], references: [id])
  title          String
  inputChoosable InputChoosable[]
}

//input like /M/S/XL/L...
model InputChoosable {
  id                 Int              @id @default(autoincrement())
  productChoosableId Int
  ProductChoosable   ProductChoosable @relation(fields: [productChoosableId], references: [id])
  input              String
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Product? @relation(fields: [productId], references: [id])
  src       String
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  text      String   @db.Text
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  User            User     @relation(fields: [userId], references: [id])
  productId       Int
  Product         Product  @relation(fields: [productId], references: [id])
  amount          Int
  priceAtPurchase Int
  adresse         String
  postal          String
  housenumber     String
  city            String
  premiumShipping Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
